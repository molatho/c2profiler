{
  "blocks": {
    "code_signer": {
      "displayName": "Code Signer",
      "link": "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2_code-signing-certificate.htm"
    },
    "http_get": {
      "displayName": "HTTP Get",
      "link": "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2_beacon-http-transaction-walkthru.htm"
    },
    "http_post": {
      "displayName": "HTTP Post",
      "link": "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2_beacon-http-transaction-walkthru.htm"
    },
    "http_stager": {
      "displayName": "HTTP Stager",
      "link": "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2_http-staging.htm"
    },
    "http_config": {
      "displayName": "HTTP Config",
      "link": "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2_http-server-config.htm"
    },
    "https_certificate": {
      "displayName": "HTTPS Certificate",
      "link": "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2_self-signed-ssl-certificates.htm"
    },
    "stage": {
      "displayName": "Stage",
      "link": "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2-extend_pe-memory-indicators.htm"
    },
    "dns_beacon": {
      "displayName": "DNS Beacon",
      "link": "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2_dns-beacons.htm"
    },
    "post_ex": {
      "displayName": "Post-Exploitation",
      "link": "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2-extend_controll-post-exploitation.htm"
    },
    "process_inject": {
      "displayName": "Process Injection",
      "link": "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2-extend_process-injection.htm"
    }
  },
  "options": {
    "global": [
      {
        "name": "data_jitter",
        "defaultValue": "0",
        "type": "number",
        "description": "Append random-length string (up to data_jitter value) to http-get and http-post server output."
      },
      {
        "name": "headers_remove",
        "defaultValue": "",
        "type": "string",
        "description": "Comma-separated list of HTTP client headers to remove from Beacon C2"
      },
      {
        "name": "host_stage",
        "defaultValue": "true",
        "type": "boolean",
        "description": "Host payload for staging over HTTP, HTTPS, or DNS. Required by stagers."
      },
      {
        "name": "jitter",
        "defaultValue": "0",
        "type": "number",
        "description": "Default jitter factor (0-99%)"
      },
      {
        "name": "pipename",
        "defaultValue": "msagent_##",
        "type": "string",
        "description": "Default name of pipe to use for SMB Beacon's peer-to- peer communication. Each # is replaced with a random hex value."
      },
      {
        "name": "pipename_stager",
        "defaultValue": "status_##",
        "type": "string",
        "description": "Name of pipe to use for SMB Beacon's named pipe stager. Each # is replaced with a random hex value."
      },
      {
        "name": "sample_name",
        "defaultValue": "My Profile",
        "type": "string",
        "description": "The name of this profile (used in the Indicators of Compromise report)"
      },
      {
        "name": "sleeptime",
        "defaultValue": "60000",
        "type": "number",
        "description": "Default sleep time (in milliseconds)"
      },
      {
        "name": "smb_frame_header",
        "defaultValue": "",
        "description": "Prepend header to SMB Beacon messages"
      },
      {
        "name": "ssh_banner",
        "defaultValue": "Cobalt Strike 4.2",
        "type": "string",
        "description": "SSH client banner"
      },
      {
        "name": "ssh_pipename",
        "defaultValue": "postex_ssh_####",
        "type": "string",
        "description": "Name of pipe for SSH sessions. Each # is replaced with a random hex value."
      },
      {
        "name": "steal_token_access_mask",
        "defaultValue": "Blank/0 (TOKEN_ALL_ACCESS)",
        "type": "string",
        "description": "Sets the default used by steal_token beacon command and bsteal_token beacon aggressor script command for the OpenProcessToken functions \"Desired Access\".\n\nSuggestion: use \"11\" for \"TOKEN_DUPLICATE | TOKEN_ASSIGN_PRIMARY | TOKEN_QUERY\""
      },
      {
        "name": "tasks_max_size",
        "defaultValue": "1048576",
        "type": "number",
        "description": "The maximum size (in bytes) of task(s) and proxy data that can be transferred through a communication channel at a check in"
      },
      {
        "name": "tasks_proxy_max_size",
        "defaultValue": "921600",
        "type": "number",
        "description": "The maximum size (in bytes) of proxy data to transfer via the communication channel at a check in."
      },
      {
        "name": "tasks_dns_proxy_max_size",
        "defaultValue": "71680",
        "type": "number",
        "description": "The maximum size (in bytes) of proxy data to transfer via the DNS communication channel at a check in."
      },
      {
        "name": "tcp_frame_header",
        "defaultValue": "",
        "type": "string",
        "description": "Prepend header to TCP Beacon messages"
      },
      {
        "name": "tcp_port",
        "defaultValue": "4444",
        "type": "number",
        "description": "Default TCP Beacon listen port"
      },
      {
        "name": "useragent",
        "defaultValue": "Internet Explorer (Random)",
        "type": "string",
        "description": "Default User-Agent for HTTP comms."
      }
    ],
    "code_signer": [
      {
        "name": "keystore",
        "defaultValue": "keystore.jks",
        "type": "string"
      },
      {
        "name": "password",
        "defaultValue": "password",
        "type": "string"
      },
      {
        "name": "alias",
        "defaultValue": "server",
        "type": "string"
      },
      {
        "name": "timestamp",
        "defaultValue": "false",
        "type": "boolean"
      },
      {
        "name": "timestamp_url",
        "defaultValue": "set: //timestamp.digicert.com",
        "type": "string"
      }
    ],
    "http_get": [
      {
        "name": "uri",
        "defaultValue": "/api/v1/Updates",
        "type": "string"
      },
      {
        "name": "verb",
        "defaultValue": "GET",
        "type": "string",
        "description": "HTTP Verb to use for transaction"
      }
    ],
    "http_post": [
      {
        "name": "uri",
        "defaultValue": "/api/v1/Telemetry/Id/",
        "type": "string"
      },
      {
        "name": "verb",
        "defaultValue": "POST",
        "type": "string",
        "description": "HTTP Verb to use for transaction"
      }
    ],
    "http_config": [
      {
        "name": "headers",
        "defaultValue": "Date, Server, Content-Length, Keep-Alive, Connection, Content-Type",
        "type": "string"
      },
      {
        "name": "trust_x_forwarded_for",
        "defaultValue": "true",
        "type": "boolean"
      }
    ],
    "https_certificate": [
      {
        "name": "C",
        "defaultValue": "US",
        "type": "string",
        "description": "Country"
      },
      {
        "name": "CN",
        "defaultValue": "localhost",
        "type": "string"
      },
      {
        "name": "L",
        "defaultValue": "San Francisco",
        "type": "string",
        "description": "Location"
      },
      {
        "name": "OU",
        "defaultValue": "IT Services",
        "type": "string",
        "description": "Organizational Unit"
      },
      {
        "name": "O",
        "defaultValue": "FooCorp",
        "type": "string",
        "description": "Organization Name"
      },
      {
        "name": "ST",
        "defaultValue": "CA",
        "type": "string",
        "description": "State"
      },
      {
        "name": "validity",
        "defaultValue": "365",
        "type": "number"
      },
      {
        "name": "keystore",
        "defaultValue": "domain.store",
        "type": "string"
      },
      {
        "name": "password",
        "defaultValue": "mypassword",
        "type": "string"
      }
    ],
    "stage": [
      {
        "name": "allocator",
        "defaultValue": "MapViewOfFile",
        "type": "string",
        "description": "HeapAlloc, MapViewOfFile, and VirtualAlloc"
      },
      {
        "name": "cleanup",
        "defaultValue": "true",
        "type": "boolean",
        "description": "Ask Beacon to attempt to free memory associated with the Reflective DLL package that initialized it."
      },
      {
        "name": "magic_mz_x86",
        "defaultValue": "MZAR",
        "type": "string",
        "description": "Override the first bytes (MZ header included) of Beacon's Reflective DLL. Valid x86 instructions are required. Follow instructions that change CPU state with instructions that undo the change."
      },
      {
        "name": "magic_mz_x64",
        "defaultValue": "MZAR",
        "type": "string",
        "description": "Override the first bytes (MZ header included) of Beacon's Reflective DLL. Valid x86 instructions are required. Follow instructions that change CPU state with instructions that undo the change."
      },
      {
        "name": "magic_pe",
        "defaultValue": "PE",
        "type": "string",
        "description": "Override PE marker with something else."
      },
      {
        "name": "module_x86",
        "defaultValue": "xpsservices.dll",
        "type": "string",
        "description": "Ask the x86 ReflectiveLoader to load the specified library and overwrite its space instead of allocating memory with VirtualAlloc.\nOnly works with VirtualAlloc."
      },
      {
        "name": "module_x64",
        "defaultValue": "xpsservices.dll",
        "type": "string",
        "description": "Ask the x86 ReflectiveLoader to load the specified library and overwrite its space instead of allocating memory with VirtualAlloc.\nOnly works with VirtualAlloc."
      },
      {
        "name": "obfuscate",
        "defaultValue": "false",
        "type": "boolean",
        "description": "Obfuscate the Reflective DLL's import table, overwrite unused header content, and ask ReflectiveLoader to copy Beacon to new memory without its DLL headers."
      },
      {
        "name": "sleep_mask",
        "defaultValue": "false",
        "type": "boolean",
        "description": "Obfuscate Beacon, in-memory, prior to sleeping."
      },
      {
        "name": "smartinject",
        "defaultValue": "true",
        "type": "boolean",
        "description": "Use embedded function pointer hints to bootstrap Beacon agent without walking kernel32 EAT."
      },
      {
        "name": "stomppe",
        "defaultValue": "true",
        "type": "boolean",
        "description": "Ask ReflectiveLoader to stomp MZ, PE, and e_lfanew values after it loads Beacon payload."
      },
      {
        "name": "userwx",
        "defaultValue": "false",
        "type": "boolean",
        "description": "Ask ReflectiveLoader to use (true) or avoid RWX permissions (false) for Beacon DLL in memory."
      },
      {
        "name": "name",
        "defaultValue": "beacon.x64.dll",
        "type": "string",
        "description": "The Exported name of the Beacon DLL."
      },
      {
        "name": "compile_time",
        "defaultValue": "14 Jul 2018 8:14:00",
        "type": "string",
        "description": "Compile time of the Beacon DLL.\nCopy from peclone."
      },
      {
        "name": "image_size_x86",
        "defaultValue": "512000",
        "type": "number",
        "description": "Copy from peclone."
      },
      {
        "name": "image_size_x64",
        "defaultValue": "512000",
        "type": "number",
        "description": "Copy from peclone."
      },
      {
        "name": "entry_point",
        "defaultValue": "92145",
        "type": "number",
        "description": "Copy from peclone."
      },
      {
        "name": "rich_header",
        "defaultValue": "\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00",
        "type": "string",
        "description": "Copy from peclone."
      }
    ],
    "dns_beacon": [
      {
        "name": "maxdns",
        "defaultValue": "255",
        "type": "number"
      },
      {
        "name": "dns_idle",
        "defaultValue": "0.0.0.0",
        "type": "string"
      },
      {
        "name": "dns_max_txt",
        "defaultValue": "252",
        "type": "number"
      },
      {
        "name": "dns_sleep",
        "defaultValue": "0",
        "type": "number"
      },
      {
        "name": "dns_stager_prepend",
        "defaultValue": "",
        "type": "string"
      },
      {
        "name": "dns_stager_subhost",
        "defaultValue": ".stage.123456.",
        "type": "string"
      },
      {
        "name": "dns_ttl",
        "defaultValue": "1",
        "type": "number"
      }
    ],
    "post_ex": [
      {
        "name": "spawnto_x86",
        "defaultValue": "%windir%\\\\syswow64\\\\WerFault.exe",
        "type": "string"
      },
      {
        "name": "spawnto_x64",
        "defaultValue": "%windir%\\\\sysnative\\\\WerFault.exe",
        "type": "string"
      },
      {
        "name": "obfuscate",
        "defaultValue": "true",
        "type": "boolean"
      },
      {
        "name": "pipename",
        "defaultValue": "msrpc_####, win\\\\msrpc_##",
        "type": "string"
      },
      {
        "name": "smartinject",
        "defaultValue": "true",
        "type": "boolean"
      },
      {
        "name": "amsi_disable",
        "defaultValue": "true",
        "type": "boolean"
      },
      {
        "name": "thread_hint",
        "defaultValue": "....TODO:FIXME",
        "type": "string"
      },
      {
        "name": "keylogger",
        "defaultValue": "GetAsyncKeyState",
        "type": "string"
      }
    ],
    "process_inject": [
      {
        "name": "allocator",
        "defaultValue": "VirtualAllocEx",
        "type": "string",
        "description": "The preferred method to allocate memory in the remote process. Specify VirtualAllocEx or NtMapViewOfSection. The NtMapViewOfSection option is for same-architecture injection only. VirtualAllocEx is always used for cross-arch memory allocations."
      },
      {
        "name": "bof_allocator",
        "defaultValue": "VirtualAllocEx",
        "type": "string",
        "description": "The preferred method to allocate memory in the current process to execute a BOF. Specify VirtualAlloc, MapViewOfFile, or HeapAlloc."
      },
      {
        "name": "bof_reuse_memory",
        "defaultValue": "true",
        "type": "boolean",
        "description": "Reuse the allocated memory for subsequent BOF executions otherwise release the memory. Memory will be cleared when not in use. If the available amount of memory is not large enough it will be released and allocated with the larger size."
      },
      {
        "name": "min_alloc",
        "defaultValue": "16384",
        "description": "Minimum amount of memory to request for injected or BOF content.",
        "type": "number"
      },
      {
        "name": "startrwx",
        "defaultValue": "true",
        "description": "Use RWX as initial permissions for injected or BOF content. Alternative is RW. When BOF memory is not in use the permissions will be set based on this setting.",
        "type": "boolean"
      },
      {
        "name": "userwx",
        "defaultValue": "false",
        "description": "Use RWX as final permissions for injected or BOF content. Alternative is RX.",
        "type": "boolean"
      }
    ],
    "http_stager": [
      {
        "name": "uri_x86",
        "defaultValue": "/api/v1/GetLicence",
        "type": "string",
        "description": "TODO"
      },
      {
        "name": "uri_x64",
        "defaultValue": "/api/v2/GetLicence",
        "type": "string",
        "description": "TODO"
      }
    ]
  },
  "transforms": {
    "append": {
      "displayName": "Append",
      "operand": true,
      "description": "Appends a string"
    },
    "prepend": {
      "displayName": "Prepend",
      "operand": true,
      "description": "Prepends a string"
    },
    "base64": {
      "displayName": "Base64",
      "operand": false,
      "description": "Base64 encodes a string"
    },
    "base64url": {
      "displayName": "Base64 URL",
      "operand": false,
      "description": "Base64 & URL encodes a string"
    },
    "mask": {
      "displayName": "XOR-Mask",
      "operand": false,
      "description": "XOR encodes a stirng"
    },
    "netbios": {
      "displayName": "NetBIOS",
      "operand": false,
      "description": "NetBIOS encodes a string"
    },
    "netbiosu": {
      "displayName": "NetBIOS (U)",
      "operand": false,
      "description": "NetBIOS encodes a string (unicode)"
    }
  },
  "terminations": {
    "header": {
      "displayName": "Header",
      "operand": true,
      "description": "Store data in an HTTP header"
    },
    "parameter": {
      "displayName": "Parameter",
      "operand": true,
      "description": "Store data in a URI parameter"
    },
    "print": {
      "displayName": "Print",
      "operand": false,
      "description": "Send data as transaction body"
    },
    "uri-append": {
      "displayName": "URI-append",
      "operand": false,
      "description": "Append to URI"
    }
  },
  "payloadTransforms": {
    "append": {
      "displayName": "Append",
      "operand2": false,
      "description": "Appends a string"
    },
    "prepend": {
      "displayName": "Prepend",
      "operand2": false,
      "description": "Prepends a string"
    },
    "strrep": {
      "displayName": "String Replace",
      "operand2": true,
      "description": "Replaces a string"
    }
  },
  "payloadCommands": {
    "string": {
      "displayName": "String",
      "description": "Appends a string"
    },
    "stringw": {
      "displayName": "String (wide)",
      "description": "Appends a wide string"
    },
    "data": {
      "displayName": "Data",
      "description": "Appends raw bytes"
    }
  },
  "executeCommands": {
    "CreateThread": {
      "operand": true
    },
    "CreateRemoteThread": {
      "operand": true
    },
    "NtQueueApcThread": {
      "operand": false
    },
    "NtQueueApcThread-s": {
      "operand": false
    },
    "RtlCreateUserThread": {
      "operand": false
    },
    "SetThreadContext": {
      "operand": false
    }
  }
}